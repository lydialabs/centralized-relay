package bitcoin

import (
	"context"
	"encoding/hex"
	"fmt"
	"log"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/icon-project/centralized-relay/utils/multisig"
	"github.com/studyzy/runestone"

	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/icon-project/centralized-relay/relayer/chains/bitcoin/abi"
	"github.com/icon-project/icon-bridge/common/codec"
	"lukechampine.com/uint128"
)

func TestDecode(t *testing.T) {

	// hexString := types.new
	data, _ := hex.DecodeString("f884874465706f73697483303a31b83e74623170677a7838383079667237713864677a38647168773530736e6375346634686d7735636e3338303033353474757a6379396a783573687676377375b33078322e69636f6e2f687830316361383532383764363334323732326665373333633235363637363736623963663966386134823a9880")
	depositInfo := XCallMessage{}
	_, err := codec.RLP.UnmarshalFromBytes(data, &depositInfo)
	if err != nil {
		log.Fatal(err.Error())
	}
	fmt.Println(depositInfo)
	amount := new(big.Int).SetBytes(depositInfo.Amount)
	amountInDecimal := new(big.Float).SetInt(amount)
	fmt.Println(amountInDecimal)
	fmt.Println("\n =============")

	// test decode 2
	data, _ = hex.DecodeString("f9011d01b90119f90116b33078322e69636f6e2f637866633836656537363837653162663638316235353438623236363738343434383563306537313932b83e74623170677a7838383079667237713864677a38647168773530736e6375346634686d7735636e3338303033353474757a6379396a783573687676377375821e8501b852f8508a5769746864726177546f83303a30b83e74623170677a7838383079667237713864677a38647168773530736e6375346634686d7735636e3338303033353474757a6379396a78357368767637737564f848b8463078322e6274632f74623170677a7838383079667237713864677a38647168773530736e6375346634686d7735636e3338303033353474757a6379396a783573687676377375")
	withdrawInfoWrapper := CSMessage{}
	_, err = codec.RLP.UnmarshalFromBytes(data, &withdrawInfoWrapper)
	if err != nil {
		log.Fatal(err.Error())
	}

	fmt.Println(withdrawInfoWrapper)
	fmt.Println("\n =============")

	// // withdraw info data
	withdrawInfoWrapperV2 := CSMessageRequestV2{}
	_, err = codec.RLP.UnmarshalFromBytes(withdrawInfoWrapper.Payload, &withdrawInfoWrapperV2)
	if err != nil {
		log.Fatal(err.Error())
	}

	fmt.Println(withdrawInfoWrapperV2)
	fmt.Println("\n =============")

	// // withdraw info
	withdrawInfo := XCallMessage{}
	_, err = codec.RLP.UnmarshalFromBytes(withdrawInfoWrapperV2.Data, &withdrawInfo)
	if err != nil {
		log.Fatal(err.Error())
	}

	fmt.Println(withdrawInfo)
}

func TestDecodeConnectionContract(t *testing.T) {
	data, _ := hex.DecodeString("f9014101b9013df9013ab8463078322e6274632f746231706630617470743264337a656c36756477733338706b7268326534397671643363356a63756433613832737270686e6d7065353571306563727a6baa63786663383665653736383765316266363831623535343862323636373834343438356330653731393287308a0f0000001501b890f88e874465706f7369748c323930343335343a33313139b83e74623170677a7838383079667237713864677a38647168773530736e6375346634686d7735636e3338303033353474757a6379396a783573687676377375b33078322e69636f6e2f68783134393337393462613331666133333732626637393033663034303330343937653764313438303083030d4080ebaa637835373766356537353661626438396362636261333861353835303862363061313237353464326635")
	csMessage := CSMessage{}
	_, err := codec.RLP.UnmarshalFromBytes(data, &csMessage)
	if err != nil {
		log.Fatal(err.Error())
	}

	fmt.Printf("%+v", csMessage)
}

func TestEncodeToXcallMessage(t *testing.T) {
	// init contract  optimism
	amount0, _ := uint128.FromString("18999999999999999977283654")
	amount1, _ := uint128.FromString("539580403982610478")
	initPrice, _ := uint128.FromString("12015251367205891895777574")

	radfiMsg := &multisig.RadFiDecodedMsg{
		Flag: multisig.OP_RADFI_PROVIDE_LIQUIDITY,
		ProvideLiquidityMsg: &multisig.RadFiProvideLiquidityMsg{
			Ticks: 	multisig.RadFiProvideLiquidityTicks{ UpperTick: -173940, LowerTick: -178320 },
			Min0:	0,
			Min1:	0,
			Amount0: amount0,
			Amount1: amount1,
			InitPrice: initPrice,
			Token0Decimal: 8,
			Token1Decimal: 5,
			SequenceNumber: uint128.From64(1),
			Fee:	3000,
			Token0Id: runestone.RuneId{ Block: 1, Tx: 5},
			Token1Id: runestone.RuneId{ Block: 3009542, Tx: 165},
		},
	}

	protocols := []string{
		"0xCe3a6E2E32A91744E7028907B6d68599B69d980B",
        "0x30958E26002E3a1B363b6BD61c79b1E85BeC9E33",
        "0x501BC1B3fcD3eFEce8B376cCE9bFa2E26B3Da55A",
	}

	rpcURL := "https://sepolia.optimism.io"
	rpc, err := ethclient.DialContext(context.Background(), rpcURL)
	if err != nil {
		panic(err)
	}

	runeFactory, err := abi.NewRunefactory(common.HexToAddress("0xEDB9ABc78A4557b24D06A25675ed99BB02fEe1dA"), rpc)
	if err != nil {
		panic(err)
	}

	res, radfiCalldata, err := ToXCallMessage(
		radfiMsg,
		"0x2.btc/tb1p22rjagtq7e4ckelvvngvt0n7m9g3vnj3f4sk4lh854ad6u43urdqn8g5sv",
		"0x54b200FF2204D2b8686960Bb8F32F1562d0Acd71",
		1,
		protocols,
		"", // todo: update later
		runeFactory,
	)
	if err != nil {
		log.Fatal(err.Error())
	}

	resReadable := hex.EncodeToString(res)
	t.Log(resReadable)
	t.Log(hex.EncodeToString(radfiCalldata))

	// assert.Equal(t, resReadable, "f9027b01b90277f902748b3078332e4254432f307861aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360201b901e0000000000000000000000000000013938b55edfbf3380656cc321770ccf470e10000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000016488316456000000000000000000000000357620ccac61dd930263504a9694d71a6ab0001a000000000000000000000000862fe57e9742222f16b8823c27f8d9b187270a620000000000000000000000000000000000000000000000000000000000000bb8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd4770fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd588c0000000000000000000000000000000000000000000fb768105935a2f1a5b649000000000000000000000000000000000000000000000000077cf984c325302e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a68f967bfa230780a385175d0c86ae4048d309600000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000000f856aa307839333265303838343533353135373230423865443530633139393943344263376263313139393146aa307835323643354263643337364641443733383738306530393945393732334136323034344430333139")

	// // test init pool data
	// test1.InitPrice = uint256.MustFromDecimal("12015251367205891895777574")
	// test1.Token0 = "BTC"
	// test1.Token1 = "RAD"

	// res, err = ToXCallMessage(
	// 	test1,
	// 	"0x3.BTC/0xa",
	// 	"0x2a68F967bFA230780a385175d0c86AE4048d3096",
	// 	1,
	// 	protocols,
	// 	common.HexToAddress("0x00013b59981E1be455002b529Ae15442b990EeE6"),
	// )
	// if err != nil {
	// 	log.Fatal(err.Error())
	// }

	// resReadable = hex.EncodeToString(res)
	// // fmt.Printf("%+v \n", resReadable)

	// assert.Equal(
	// 	t,
	// 	"f9039b01b90397f903948b3078332e4254432f307861aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360101b9030000000000000000000000000000013b59981e1be455002b529ae15442b990eee600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000284ca38b32600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000240000000000000000000000000357620ccac61dd930263504a9694d71a6ab0001a000000000000000000000000862fe57e9742222f16b8823c27f8d9b187270a620000000000000000000000000000000000000000000000000000000000000bb8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd4770fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd588c0000000000000000000000000000000000000000000fb768105935a2f1a5b649000000000000000000000000000000000000000000000000077cf984c325302e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a68f967bfa230780a385175d0c86ae4048d309600000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000009f05414ee7fb0e04cd926000000000000000000000000000000000000000000000000000000000000000342544300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003524144000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f856aa307839333265303838343533353135373230423865443530633139393943344263376263313139393146aa307835323643354263643337364641443733383738306530393945393732334136323034344430333139",
	// 	resReadable,
	// )

	// // test RadFiWithdrawLiquidityMsg liquidity calldata
	// radFiWithdrawLiquidityMsg := multisig.RadFiWithdrawLiquidityMsg{
	// 	RecipientIndex: 0,
	// 	LiquidityValue:  uint256.MustFromDecimal("100000"),
	// 	NftId:           uint256.MustFromDecimal("1"),
	// 	Amount0Min:      uint256.MustFromDecimal("0"),
	// 	Amount1Min:      uint256.MustFromDecimal("0"),
	// }

	// res, err = ToXCallMessage(
	// 	radFiWithdrawLiquidityMsg,
	// 	"0x3.BTC/0xa",
	// 	"0x2a68F967bFA230780a385175d0c86AE4048d3096",
	// 	4,
	// 	protocols,
	// 	common.HexToAddress("0x00013b59981E1be455002b529Ae15442b990EeE6"),
	// )
	// if err != nil {
	// 	log.Fatal(err.Error())
	// }

	// resReadable = hex.EncodeToString(res)
	// fmt.Printf("%+v \n", resReadable)

	// assert.Equal(
	// 	t,
	// 	"f9021b01b90217f902148b3078332e4254432f307861aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360401b9018000000000000000000000000000013b59981e1be455002b529ae15442b990eee600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000104028318cf000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a40c49ccbe000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f856aa307839333265303838343533353135373230423865443530633139393943344263376263313139393146aa307835323643354263643337364641443733383738306530393945393732334136323034344430333139",
	// 	resReadable,
	// )

	// // // test RadFiIncreaseLiquidityMsg calldata
	// // radFiIncreaseLiquidityMsg := multisig.RadFiIncreaseLiquidityMsg{
	// // 	Min0:           9900,
	// // 	Min1:           9900,
	// // 	NftId:          uint256.MustFromDecimal("123456"),
	// // 	Amount0Desired: uint256.MustFromDecimal("1000000000000000000"),
	// // 	Amount1Desired: uint256.MustFromDecimal("2000000000000000000"),
	// // 	Amount0Min:     uint256.MustFromDecimal("990000000000000000"),
	// // 	Amount1Min:     uint256.MustFromDecimal("1980000000000000000"),
	// // }

	// // res, err = ToXCallMessage(
	// // 	radFiIncreaseLiquidityMsg,
	// // 	"0x3.BTC/0xa",
	// // 	"0x2a68F967bFA230780a385175d0c86AE4048d3096",
	// // 	2,
	// // 	protocols,
	// // 	common.HexToAddress("0x00013b59981E1be455002b529Ae15442b990EeE6"),
	// // 	common.HexToAddress("0x357620CCac61dd930263504a9694d71a6aB0001A"),
	// // 	common.HexToAddress("0x862fe57E9742222F16b8823c27F8D9b187270a62"),
	// // )
	// // if err != nil {
	// // 	log.Fatal(err.Error())
	// // }

	// // resReadable = hex.EncodeToString(res)
	// // // fmt.Printf("%+v \n", resReadable)

	// // test RadFiSwapMsg calldata for exact input

	// radFiSwapMsg := multisig.RadFiSwapMsg{
	// 	IsExactInOut:     true,
	// 	TokenOutIndex:    1,
	// 	Fee:              3000,
	// 	AmountIn:         uint256.MustFromDecimal("18999999999999999977300"),
	// 	AmountOutMinimum: uint256.MustFromDecimal("0"),
	// }
	// radFiSwapMsg.Path, err = BuildPath([]common.Address{common.HexToAddress("0x357620CCac61dd930263504a9694d71a6aB0001A"),  common.HexToAddress("0x862fe57E9742222F16b8823c27F8D9b187270a62")}, []int64{int64(radFiSwapMsg.Fee)})
	// if err != nil {
	// 	log.Fatalln(err)
	// }

	// res, err = ToXCallMessage(
	// 	radFiSwapMsg,
	// 	"0x3.BTC/0xa",
	// 	"0x2a68F967bFA230780a385175d0c86AE4048d3096",
	// 	3,
	// 	protocols,
	// 	common.HexToAddress("0x00013b59981E1be455002b529Ae15442b990EeE6"),
	// )
	// if err != nil {
	// 	log.Fatal(err.Error())
	// }

	// resReadable = hex.EncodeToString(res)
	// fmt.Printf("%+v \n", resReadable)

	// assert.Equal(
	// 	t,
	// 	"f9023b01b90237f902348b3078332e4254432f307861aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360301b901a000000000000000000000000000013b59981e1be455002b529ae15442b990eee600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000124c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000002a68f967bfa230780a385175d0c86ae4048d309600000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000405fdf7e5af85dfa7540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b357620ccac61dd930263504a9694d71a6ab0001a000bb8862fe57e9742222f16b8823c27f8d9b187270a6200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f856aa307839333265303838343533353135373230423865443530633139393943344263376263313139393146aa307835323643354263643337364641443733383738306530393945393732334136323034344430333139",
	// 	resReadable,
	// )

	// // // test RadFiSwapMsg calldata for exact output
	// // radFiSwapMsg = multisig.RadFiSwapMsg{
	// // 	IsExactInOut:    false,
	// // 	TokenOutIndex:   1,
	// // 	Fee:             3000,
	// // 	AmountInMaximum: uint256.MustFromDecimal("2000000000000000000"),
	// // 	AmountOut:       uint256.MustFromDecimal("990000000000000000"),
	// // }

	// // res, err = ToXCallMessage(
	// // 	radFiSwapMsg,
	// // 	"0x3.BTC/0xa",
	// // 	"0x2a68F967bFA230780a385175d0c86AE4048d3096",
	// // 	4,
	// // 	protocols,
	// // 	common.HexToAddress("0x00013b59981E1be455002b529Ae15442b990EeE6"),
	// // 	common.HexToAddress("0x357620CCac61dd930263504a9694d71a6aB0001A"),
	// // 	common.HexToAddress("0x862fe57E9742222F16b8823c27F8D9b187270a62"),
	// // )
	// // if err != nil {
	// // 	log.Fatal(err.Error())
	// // }

	// // resReadable = hex.EncodeToString(res)
	// // // fmt.Printf("%+v \n", resReadable)

	// // assert.Equal(
	// // 	t,
	// // 	"f9032901b90325f903228b3078332e4254432f307861aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360104b902e000000000000000000000000000013b59981e1be455002b529ae15442b990eee600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000204f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000db8314c6bc7500000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000002a68f967bfa230780a385175d0c86ae4048d309600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042862fe57e9742222f16b8823c27f8d9b187270a62000bb8357620ccac61dd930263504a9694d71a6ab0001a00000000000000000000000000000000000000000000000000000000000000",
	// // 	resReadable,
	// // )

	// // collect fee in calldata
	// // test RadFiCollectFeesMsg calldata
	// radFiCollectFeesMsg := multisig.RadFiCollectFeesMsg{
	// 	RecipientIndex: 0,
	// 	NftId:          uint256.MustFromDecimal("1"),
	// }

	// res, err = ToXCallMessage(
	// 	radFiCollectFeesMsg,
	// 	"0x3.BTC/0xa",
	// 	"0x2a68F967bFA230780a385175d0c86AE4048d3096",
	// 	6,
	// 	protocols,
	// 	common.HexToAddress("0x00013b59981E1be455002b529Ae15442b990EeE6"),
	// )
	// if err != nil {
	// 	log.Fatal(err.Error())
	// }

	// resReadable = hex.EncodeToString(res)
	// // fmt.Printf("%+v \n", resReadable)

	// assert.Equal(
	// 	t,
	// 	"f901fb01b901f7f901f48b3078332e4254432f307861aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360601b9016000000000000000000000000000013b59981e1be455002b529ae15442b990eee6000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e4028318cf00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000084fc6f786500000000000000000000000000000000000000000000000000000000000000010000000000000000000000002a68f967bfa230780a385175d0c86ae4048d309600000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000ffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f856aa307839333265303838343533353135373230423865443530633139393943344263376263313139393146aa307835323643354263643337364641443733383738306530393945393732334136323034344430333139",
	// 	resReadable,
	// )
}
