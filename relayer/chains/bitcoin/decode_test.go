package bitcoin

import (
	"encoding/hex"
	"fmt"
	"github.com/ethereum/go-ethereum/common"
	"github.com/icon-project/centralized-relay/utils/multisig"
	"log"
	"os"
	"testing"

	"github.com/icon-project/icon-bridge/common/codec"
	"github.com/stretchr/testify/assert"
	"github.com/holiman/uint256"
)

func TestDecode(t *testing.T) {
	data, _ := hex.DecodeString("f90106874465706f736974aa307830303030303030303030303030303030303030303030303030303030303030303030303030303030aa307843393736333336343766363634664645443041613933363937374437353638363664433733433037b33078312e69636f6e2f637832316539346330386330336461656538306332356438656533656132326132303738366563323331890db7148f8c6dd40000b8687b226d6574686f64223a225f73776170222c22706172616d73223a7b2270617468223a5b5d2c227265636569766572223a223078312e69636f6e2f687830343232393361393061303433656136383933653731663565343662663464646366323334633233227d7d")
	depositInfo := XCallMessage{}
	_, err := codec.RLP.UnmarshalFromBytes(data, &depositInfo)
	if err != nil {
		log.Fatal(err.Error())
	}

	fmt.Println(depositInfo)
	fmt.Println("\n =============")

	// test decode 2
	data, _ = hex.DecodeString("f9011d01b90119f90116b33078322e69636f6e2f637866633836656537363837653162663638316235353438623236363738343434383563306537313932b83e74623170677a7838383079667237713864677a38647168773530736e6375346634686d7735636e3338303033353474757a6379396a783573687676377375821e8501b852f8508a5769746864726177546f83303a30b83e74623170677a7838383079667237713864677a38647168773530736e6375346634686d7735636e3338303033353474757a6379396a78357368767637737564f848b8463078322e6274632f74623170677a7838383079667237713864677a38647168773530736e6375346634686d7735636e3338303033353474757a6379396a783573687676377375")
	withdrawInfoWrapper := CSMessage{}
	_, err = codec.RLP.UnmarshalFromBytes(data, &withdrawInfoWrapper)
	if err != nil {
		log.Fatal(err.Error())
	}

	fmt.Println(withdrawInfoWrapper)
	fmt.Println("\n =============")

	// withdraw info data
	withdrawInfoWrapperV2 := CSMessageRequestV2{}
	_, err = codec.RLP.UnmarshalFromBytes(withdrawInfoWrapper.Payload, &withdrawInfoWrapperV2)
	if err != nil {
		log.Fatal(err.Error())
	}

	fmt.Println(withdrawInfoWrapperV2)
	fmt.Println("\n =============")

	// withdraw info
	withdrawInfo := XCallMessage{}
	_, err = codec.RLP.UnmarshalFromBytes(withdrawInfoWrapperV2.Data, &withdrawInfo)
	if err != nil {
		log.Fatal(err.Error())
	}

	fmt.Println(withdrawInfo)
}

func TestGetRuneBalanceAtIndex(t *testing.T) {
	//
	res, err := GetRuneTxIndex("https://open-api.unisat.io/v1/indexer/runes", "GET", os.Getenv("APIToken"), "60fa23d19c8116dbb09441bf3d1ee27067c3d2b3735caf2045db84ea8f76d436", 2)
	if err != nil {
		log.Fatal(err.Error())
	}

	fmt.Printf("%+v", res)
}

func TestEncodeToXcallMessage(t *testing.T) {
	//
	test1 := multisig.RadFiProvideLiquidityMsg{
		Detail: &multisig.RadFiProvideLiquidityDetail{
			Fee:       30,
			UpperTick: -173940,
			LowerTick: -178320,
			Min0:      0,
			Min1:      0,
		},
	}
	test1.Detail.Amount0Desired = uint256.MustFromDecimal("18999999999999999977305673")
	test1.Detail.Amount1Desired = uint256.MustFromDecimal("539580403982610478")

	protocols := []string{
		"0x932e088453515720B8eD50c1999C4Bc7bc11991F",
		"0x526C5Bcd376FAD738780e099E9723A62044D0319",
	}

	res, err := ToXCallMessage(
		test1,
		"0x3.BTC/bc1qvqkshkdj67uwvlwschyq8wja6df4juhewkg5fg",
		"0x2a68F967bFA230780a385175d0c86AE4048d3096",
		2,
		protocols,
		common.HexToAddress("0x000013938B55EDFBF3380656CC321770cCF470E1"),
		common.HexToAddress("0x66f2A9220C8479d73eE84df0932f38C496e8E9e3"),
		common.HexToAddress("0x7a4a1aF7B59c5FF522D5F11336d5b20d5116c7cb"),
	)
	if err != nil {
		log.Fatal(err.Error())
	}

	resReadable := hex.EncodeToString(res)
	// fmt.Printf("%+v", resReadable)

	assert.Equal(t, resReadable, "f902a201b9029ef9029bb23078332e4254432f6263317176716b73686b646a36377577766c77736368797138776a61366466346a756865776b67356667aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360201b901e0000000000000000000000000000013938b55edfbf3380656cc321770ccf470e1000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001648831645600000000000000000000000066f2a9220c8479d73ee84df0932f38c496e8e9e30000000000000000000000007a4a1af7b59c5ff522d5f11336d5b20d5116c7cb0000000000000000000000000000000000000000000000000000000000000bb8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd4770fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd588c0000000000000000000000000000000000000000000fb768105935a2f1a5b649000000000000000000000000000000000000000000000000077cf984c325302e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a68f967bfa230780a385175d0c86ae4048d3096000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000f856aa307839333265303838343533353135373230423865443530633139393943344263376263313139393146aa307835323643354263643337364641443733383738306530393945393732334136323034344430333139")

	// test init pool data 
	test1.InitPrice = uint256.MustFromDecimal("12015251367205891895777574")
	test1.Token0 = "BTC"
	test1.Token1 = "RAD"

	res, err = ToXCallMessage(
		test1,
		"0x3.BTC/0xa",
		"0x2a68F967bFA230780a385175d0c86AE4048d3096",
		1,
		protocols,
		common.HexToAddress("0x00013b59981E1be455002b529Ae15442b990EeE6"),
		common.HexToAddress("0x357620CCac61dd930263504a9694d71a6aB0001A"),
		common.HexToAddress("0x862fe57E9742222F16b8823c27F8D9b187270a62"),
	)
	if err != nil {
		log.Fatal(err.Error())
	}

	resReadable = hex.EncodeToString(res)
	// fmt.Printf("%+v \n", resReadable)

	assert.Equal(
		t, 
		"f9039b01b90397f903948b3078332e4254432f307861aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360101b9030000000000000000000000000000013b59981e1be455002b529ae15442b990eee600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000284ca38b32600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000240000000000000000000000000357620ccac61dd930263504a9694d71a6ab0001a000000000000000000000000862fe57e9742222f16b8823c27f8d9b187270a620000000000000000000000000000000000000000000000000000000000000bb8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd4770fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd588c0000000000000000000000000000000000000000000fb768105935a2f1a5b649000000000000000000000000000000000000000000000000077cf984c325302e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a68f967bfa230780a385175d0c86ae4048d3096000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000009f05414ee7fb0e04cd926000000000000000000000000000000000000000000000000000000000000000342544300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003524144000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f856aa307839333265303838343533353135373230423865443530633139393943344263376263313139393146aa307835323643354263643337364641443733383738306530393945393732334136323034344430333139",
		resReadable,
	)

	// test RadFiWithdrawLiquidityMsg liquidity calldata
	radFiWithdrawLiquidityMsg := multisig.RadFiWithdrawLiquidityMsg{
		RecipientIndex: 0,
		LiquidityValue:  uint256.MustFromDecimal("1000000000000000000"),
		NftId:           uint256.MustFromDecimal("123456"),
		Amount0Min:      uint256.MustFromDecimal("100000000000000000"),
		Amount1Min:      uint256.MustFromDecimal("200000000000000000"),
		V:               27,
		R:               [32]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32},
		S:               [32]byte{32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1},
	}	

	res, err = ToXCallMessage(
		radFiWithdrawLiquidityMsg,
		"0x3.BTC/0xa",
		"0x2a68F967bFA230780a385175d0c86AE4048d3096",
		1,
		protocols,
		common.HexToAddress("0x00013b59981E1be455002b529Ae15442b990EeE6"),
		common.HexToAddress("0x357620CCac61dd930263504a9694d71a6aB0001A"),
		common.HexToAddress("0x862fe57E9742222F16b8823c27F8D9b187270a62"),
	)
	if err != nil {
		log.Fatal(err.Error())
	}

	resReadable = hex.EncodeToString(res)
	// fmt.Printf("%+v \n", resReadable)

	assert.Equal(
		t, 
		"f9039b01b90397f903948b3078332e4254432f307861aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360101b9030000000000000000000000000000013b59981e1be455002b529ae15442b990eee600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000284ca38b32600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000240000000000000000000000000357620ccac61dd930263504a9694d71a6ab0001a000000000000000000000000862fe57e9742222f16b8823c27f8d9b187270a620000000000000000000000000000000000000000000000000000000000000bb8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd4770fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd588c0000000000000000000000000000000000000000000fb768105935a2f1a5b649000000000000000000000000000000000000000000000000077cf984c325302e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a68f967bfa230780a385175d0c86ae4048d3096000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000009f05414ee7fb0e04cd926000000000000000000000000000000000000000000000000000000000000000342544300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003524144000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f856aa307839333265303838343533353135373230423865443530633139393943344263376263313139393146aa307835323643354263643337364641443733383738306530393945393732334136323034344430333139",
		resReadable,
	)

	// test increase liquidity calldata
	// test RadFiIncreaseLiquidityMsg calldata
	radFiIncreaseLiquidityMsg := multisig.RadFiIncreaseLiquidityMsg{
		Min0:           9900,
		Min1:           9900,
		NftId:          uint256.MustFromDecimal("123456"),
		Amount0Desired: uint256.MustFromDecimal("1000000000000000000"),
		Amount1Desired: uint256.MustFromDecimal("2000000000000000000"),
		Amount0Min:     uint256.MustFromDecimal("990000000000000000"),
		Amount1Min:     uint256.MustFromDecimal("1980000000000000000"),
	}

	res, err = ToXCallMessage(
		radFiIncreaseLiquidityMsg,
		"0x3.BTC/0xa",
		"0x2a68F967bFA230780a385175d0c86AE4048d3096",
		2,
		protocols,
		common.HexToAddress("0x00013b59981E1be455002b529Ae15442b990EeE6"),
		common.HexToAddress("0x357620CCac61dd930263504a9694d71a6aB0001A"),
		common.HexToAddress("0x862fe57E9742222F16b8823c27F8D9b187270a62"),
	)
	if err != nil {
		log.Fatal(err.Error())
	}

	resReadable = hex.EncodeToString(res)
	// fmt.Printf("%+v \n", resReadable)

	assert.Equal(
		t,
		"f9032901b90325f903228b3078332e4254432f307861aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360102b902e000000000000000000000000000013b59981e1be455002b529ae15442b990eee60000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000020483a3b9f2000000000000000000000000000000000000000000000000000000000001e240000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000db8314c6bc7500000000000000000000000000000000000000000000000001b69b4bacd05f15000000000000000000000000000000000000000000000000000000000000000003425443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035241440000000000000000000000000000000000000000000000000000000000",
		resReadable,
	)

	// collect fee/liquidity calldata
	// test RadFiSwapMsg calldata for exact input
	radFiSwapMsg := multisig.RadFiSwapMsg{
		IsExactInOut:     true,
		TokenOutIndex:    1,
		Fee:              3000,
		AmountIn:         uint256.MustFromDecimal("1000000000000000000"),
		AmountOutMinimum: uint256.MustFromDecimal("1980000000000000000"),
	}

	res, err = ToXCallMessage(
		radFiSwapMsg,
		"0x3.BTC/0xa",
		"0x2a68F967bFA230780a385175d0c86AE4048d3096",
		3,
		protocols,
		common.HexToAddress("0x00013b59981E1be455002b529Ae15442b990EeE6"),
		common.HexToAddress("0x357620CCac61dd930263504a9694d71a6aB0001A"),
		common.HexToAddress("0x862fe57E9742222F16b8823c27F8D9b187270a62"),
	)
	if err != nil {
		log.Fatal(err.Error())
	}

	resReadable = hex.EncodeToString(res)
	// fmt.Printf("%+v \n", resReadable)

	assert.Equal(
		t,
		"f9032901b90325f903228b3078332e4254432f307861aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360103b902e000000000000000000000000000013b59981e1be455002b529ae15442b990eee600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000204414bf389000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000001b69b4bacd05f150000000000000000000000002a68f967bfa230780a385175d0c86ae4048d309600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042357620ccac61dd930263504a9694d71a6ab0001a000bb8862fe57e9742222f16b8823c27f8d9b187270a6200000000000000000000000000000000000000000000000000000000000000",
		resReadable,
	)

	// test RadFiSwapMsg calldata for exact output
	radFiSwapMsg = multisig.RadFiSwapMsg{
		IsExactInOut:    false,
		TokenOutIndex:   1,
		Fee:             3000,
		AmountInMaximum: uint256.MustFromDecimal("2000000000000000000"),
		AmountOut:       uint256.MustFromDecimal("990000000000000000"),
	}

	res, err = ToXCallMessage(
		radFiSwapMsg,
		"0x3.BTC/0xa",
		"0x2a68F967bFA230780a385175d0c86AE4048d3096",
		4,
		protocols,
		common.HexToAddress("0x00013b59981E1be455002b529Ae15442b990EeE6"),
		common.HexToAddress("0x357620CCac61dd930263504a9694d71a6aB0001A"),
		common.HexToAddress("0x862fe57E9742222F16b8823c27F8D9b187270a62"),
	)
	if err != nil {
		log.Fatal(err.Error())
	}

	resReadable = hex.EncodeToString(res)
	// fmt.Printf("%+v \n", resReadable)

	assert.Equal(
		t,
		"f9032901b90325f903228b3078332e4254432f307861aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360104b902e000000000000000000000000000013b59981e1be455002b529ae15442b990eee600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000204f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000db8314c6bc7500000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000002a68f967bfa230780a385175d0c86ae4048d309600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042862fe57e9742222f16b8823c27f8d9b187270a62000bb8357620ccac61dd930263504a9694d71a6ab0001a00000000000000000000000000000000000000000000000000000000000000",
		resReadable,
	)

	// collect fee in calldata
	// test RadFiCollectFeesMsg calldata
	radFiCollectFeesMsg := multisig.RadFiCollectFeesMsg{
		RecipientIndex: 0,
		NftId:          uint256.MustFromDecimal("123456"),
		V:              27,
		R:              [32]byte{1, 2, 3, 4, 5},
		S:              [32]byte{6, 7, 8, 9, 10},
	}

	res, err = ToXCallMessage(
		radFiCollectFeesMsg,
		"0x3.BTC/0xa",
		"0x2a68F967bFA230780a385175d0c86AE4048d3096",
		5,
		protocols,
		common.HexToAddress("0x00013b59981E1be455002b529Ae15442b990EeE6"),
		common.HexToAddress("0x357620CCac61dd930263504a9694d71a6aB0001A"),
		common.HexToAddress("0x862fe57E9742222F16b8823c27F8D9b187270a62"),
	)
	if err != nil {
		log.Fatal(err.Error())
	}

	resReadable = hex.EncodeToString(res)
	// fmt.Printf("%+v \n", resReadable)

	assert.Equal(
		t,
		"f9032901b90325f903228b3078332e4254432f307861aa3078326136384639363762464132333037383061333835313735643063383641453430343864333039360105b902e000000000000000000000000000013b59981e1be455002b529ae15442b990eee600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000204fc6f7865000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000001e240ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		resReadable,
	)
}
